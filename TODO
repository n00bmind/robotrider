:::::::::::::::::::::::::::
:: robotrider TO-DO list ::
:::::::::::::::::::::::::::


NEXT
- Basic BSP partitioning of Volumes/clusters
- Room generation and connectivity

WORLDGEN
- Space Volumes partitioning using BSP at various scale levels
- Procedural generation of some kind of infinite pipe-like world structure
- Unify all mesh pools and put them behind a ticket mutex so they can be shared by threads. Remember to _first_ do the mesh generation
  in the thread, then copying it to the mesh pool _afterwards_

EDITOR
- Hot reloading doesn't seem to work here? (was testing editor camera params)
- Entity selection mode and showing debug data about them
- Orbiting camera around selected entity (with progressive zoom)

GRAPHICS
- Frustum culling
- Decent chasing camera
- Start working on surfaces & lighting
- Aspect ratio independece using black bars as needed (also, allow the game to vary output resolution at will)
- Edge detection shader
  From reddit: "If you have a deferred renderer and it can write triangle IDs to a texture, then you can render a wireframe
  by just doing a simple edge detect on the triangle ID texture. Google for "edge detection" and/or "Sobel filter" for details.
  The nice things about this are that (a) you get hidden surface removal for free; and (b) it's a fixed cost to render, no matter how much geometry you have."
  (http://williamchyr.com/2014/03/development-update-edge-detection/)

AUDIO
- Win32: switch WASAPI to callback mode to reduce buffer size and improve latency.
  This implies creating a separate dedicated thread that just blits audio to the output.
  The buffer strategy wouldn't change, the game would check how much space is available and
  would produce the appropriate amount of frames, and the blitter thread would simply blit said
  amount to the device.
  Refs:
  https://msdn.microsoft.com/en-us/library/windows/desktop/dd370875(v=vs.85).aspx
  https://msdn.microsoft.com/en-us/library/windows/desktop/dd370844(v=vs.85).aspx
  https://github.com/pauldotknopf/WindowsSDK7-Samples/blob/master/multimedia/audio/RenderExclusiveEventDriven/WASAPIRenderer.cpp

ENGINE
- Add a separate arena per thread so we don't have to keep thinking where to put per-thread work memory
- Separate physics & input thread running at a high framerate
- Compare Fletcher against MurmurHash and maybe switch (https://github.com/aappleby/smhasher/wiki)

DEBUGGING
- Make sure out-of-frame counters are handled and shown correctly so we can properly profile multithreaded code
- Hot reloading seems to be broken for ImGui elements
- Memory stats for arenas and pools
- Profiler
- Live editable 'switches' data file (reloadable asset) that can overwrite generic game & platform variables
- Command completion & history navigation in the console
- Really dump game state to disk (asynchronously) and study how hard it would be to make it loadable across evolving game state revisions
- Add a command line switch & ingame command to load a recorded input block from disk
- Simple static analysis:
  - Detect usage of 'internal' functions outside of the file where they're defined (in case we wanna ever have non-Unity builds)

TESTING
- Basic data types
- Math library
- All multithreaded code! (queues, etc.)

