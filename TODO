:::::::::::::::::::::::::::
:: robotrider TO-DO list ::
:::::::::::::::::::::::::::


WORLDGEN
- Mesh simplication using Fast Quadric method
- Procedural generation of some kind of infinite pipe-like world structure

GAMEPLAY
- Develop some kind of entity system with selective updating based on distance from player

THREADING
- Once the previous process is complex enough, develop worker threads that can do it in the background based on player distance

EDITOR
- Entity selection mode and showing debug data about them

AUDIO
- Win32: switch WASAPI to callback mode to reduce buffer size and improve latency.
  This implies creating a separate dedicated thread that just blits audio to the output.
  The buffer strategy wouldn't change, the game would check how much space is available and
  would produce the appropriate amount of frames, and the blitter thread would simply blit said
  amount to the device.
  Refs:
  https://msdn.microsoft.com/en-us/library/windows/desktop/dd370875(v=vs.85).aspx
  https://msdn.microsoft.com/en-us/library/windows/desktop/dd370844(v=vs.85).aspx
  https://github.com/pauldotknopf/WindowsSDK7-Samples/blob/master/multimedia/audio/RenderExclusiveEventDriven/WASAPIRenderer.cpp

GRAPHICS
- Aspect ratio independece using black bars as needed (also, allow the game to vary output resolution at will)
- Edge detection shader
  From reddit: "If you have a deferred renderer and it can write triangle IDs to a texture, then you can render a wireframe
  by just doing a simple edge detect on the triangle ID texture. Google for "edge detection" and/or "Sobel filter" for details.
  The nice things about this are that (a) you get hidden surface removal for free; and (b) it's a fixed cost to render, no matter how much geometry you have."
  (http://williamchyr.com/2014/03/development-update-edge-detection/)

INPUT
- Implement a platform-independent keyboard representation (use tables from https://github.com/depp/keycode)
- Find a way to calibrate different relative movement amounts from the different input methods

DEBUGGING
- Profiler
- Profile & optimize the DEBUG build!
- Live editable 'switches' data file (reloadable asset) that can overwrite generic game & platform variables
- Command completion & history navigation in the console
- Really dump game state to disk (asynchronously) and study how hard it would be to make it loadable across game state revisions
- Add a command line switch & ingame command to load a recorded input block from disk
- Simple static analysis:
  - Detect usage of 'internal' functions outside of the file where they're defined (in case we wanna ever have non-Unity builds)

